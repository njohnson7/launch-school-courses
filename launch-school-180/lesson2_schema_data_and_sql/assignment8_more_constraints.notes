---- 1 ----
Import this file into a PostgreSQL database.:

psql -d sql-course < films2.sql

[sql]

\i films2.sql

[/sql]







---- 2 ----
Modify all of the columns to be NOT NULL.:

[sql]

ALTER TABLE films ALTER COLUMN title SET NOT NULL;
ALTER TABLE films ALTER COLUMN year SET NOT NULL;
ALTER TABLE films ALTER COLUMN genre SET NOT NULL;
ALTER TABLE films ALTER COLUMN director SET NOT NULL;
ALTER TABLE films ALTER COLUMN duration SET NOT NULL;

[/sql]







---- 3 ----
How does modifying a column to be NOT NULL affect how it is displayed by \d films?:

`not null` is displayed in the `Modifiers` table scheme column in the row for each table data column that is set to `NOT NULL`

[sql]

---ex:
+----------+------------------------+-------------+
| Column   | Type                   | Modifiers   |
|----------+------------------------+-------------|
| title    | character varying(255) |  not null   |
| year     | integer                |  not null   |
| genre    | character varying(100) |  not null   |
| director | character varying(255) |  not null   |
| duration | integer                |  not null   |
+----------+------------------------+-------------+

[/sql]







---- 4 ----
Add a constraint to the table films that ensures that all films have a unique title.:



[sql]

ALTER TABLE films ADD CONSTRAINT title_unique UNIQUE (title);

[/sql]







---- 5 ----
How is the constraint added in #4 displayed by \d films?:

- It appears as an index:

    // Indexes:
    //    "unique_title" UNIQUE CONSTRAINT, btree (title)








---- 6 ----
Write a SQL statement to remove the constraint added in #4.:

[sql]

ALTER TABLE films DROP CONSTRAINT title_unique;

[/sql]







---- 7 ----
Add a constraint to films that requires all rows to have a value for title that is at least 1 character long.:

[sql]

ALTER TABLE films ADD CONSTRAINT title_length CHECK (length(title) >= 1);


[/sql]







---- 8 ----
What error is shown if the constraint created in #7 is violated? Write a SQL INSERT statement that demonstrates this.:

// new row for relation "films" violates check constraint "title_length"
// DETAIL:  Failing row contains (, 1999, cool, bob, 120).

[sql]

INSERT INTO films VALUES ('', 1999, 'cool', 'bob', 120);

[/sql]







---- 9 ----
How is the constraint added in #7 displayed by \d films?:

  - it appears as a "check constraint"

  - below the data scheme table, under the heading "Check constraints:"

      // Check constraints:
      //    "title_length" CHECK (length(title::text) >= 1)







---- 10 ----
Write a SQL statement to remove the constraint added in #7.:

[sql]

ALTER TABLE films DROP CONSTRAINT title_length;

[/sql]







---- 11 ----
Add a constraint to the table films that ensures that all films have a year between 1900 and 2100.:

[sql]

ALTER TABLE films ADD CHECK (year BETWEEN 1900 AND 2100);

[/sql]







---- 12 ----
How is the constraint added in #11 displayed by \d films?:

- It appears as a "check constraint":

// Check constraints:
//    "films_year_check" CHECK (year >= 1900 AND year <= 2100)


[sql]



[/sql]







---- 13 ----
Add a constraint to films that requires all rows to have a value for director that is at least 3 characters long and contains at least one space character ().:

[sql]

ALTER TABLE films ADD CONSTRAINT director_length
  CHECK (length(director) >= 3 AND director LIKE '% %');


[/sql]







---- 14 ----
How does the constraint created in #13 appear in \d films?:

// Check constraints:
//     "director_length" CHECK (length(director::text) >= 3 AND director::text ~~ '% %'::text)
//    "films_year_check" CHECK (year >= 1900 AND year <= 2100)







---- 15 ----
Write an UPDATE statement that attempts to change the director for "Die Hard" to "Johnny". Show the error that occurs when this statement is executed.:

[sql]

UPDATE films SET director = 'Johnny' WHERE title = 'Die Hard';

[/sql]

// new row for relation "films" violates check constraint "director_length"
// DETAIL:  Failing row contains (Die Hard, 1988, action, Johnny, 132).






---- 16 ----
List three ways to use the schema to restrict what values can be stored in a column.:

1. data type (varchar(5), integer, etc)
2. NOT NULL constraint
3. check constaint
4. unique constraint
5. primary/foregin key






---- 17 ----
Is it possible to define a default value for a column that will be considered invalid by a constraint? Create a table that tests this.:

Yes

[sql]

CREATE TABLE shoes (name text, size numeric(3,1) DEFAULT 0);
ALTER TABLE shoes ADD CONSTRAINT shoe_size CHECK (size BETWEEN 1 AND 15);

INSERT INTO shoes (name) VALUES ('blue sneakers');
--- ERROR:  new row for relation "shoes" violates check constraint "shoe_size"
--- DETAIL:  Failing row contains (blue sneakers, 0.0).

[/sql]







---- 18 ----
How can you see a list of all of the constraints on a table?:

- `\d table_name`
