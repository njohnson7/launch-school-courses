---- 1 ----
Write a SQL statement that makes a new sequence called "counter".:

[sql]

CREATE SEQUENCE counter;

[/sql]








---- 2 ----
Write a SQL statement to retrieve the next value from the sequence created in #1.:

[sql]

SELECT nextval('counter');

[/sql]








---- 3 ----
Write a SQL statement that removes a sequence called "counter".:

[sql]

DROP SEQUENCE counter;

[/sql]








---- 4 ----
Is it possible to create a sequence that returns only even numbers? The documentation for sequence might be useful.:

- Yes

[sql]

CREATE SEQUENCE even_seq INCREMENT BY 2 START 2;

--- or ---

CREATE SEQUENCE even_counter INCREMENT BY 2 MINVALUE 2;

[/sql]








---- 5 ----
What will the name of the sequence created by the following SQL statement be?:
[sql]
      CREATE TABLE regions (id serial PRIMARY KEY, name text, area integer);
[/sql]

regions_id_seq







---- 6 ----
Write a SQL statement to add an auto-incrementing integer primary key column to the films table.:

[sql]

ALTER TABLE films ADD COLUMN id serial PRIMARY KEY;

[/sql]








---- 7 ----
What error do you receive if you attempt to update a row to have a value for id that is used by another row?:

[sql]

UPDATE films SET id = 3 WHERE id = 4;

[/sql]

// duplicate key value violates unique constraint "films_pkey"
// DETAIL:  Key (id)=(3) already exists.







---- 8 ----
What error do you receive if you attempt to add a another primary key column to the films table?:

[sql]

ALTER TABLE films ADD COLUMN id_two serial PRIMARY KEY;

[/sql]

// multiple primary keys for table "films" are not allowed








---- 9 ----
Write a SQL statement that modifies the table films to remove its primary key while preserving the id column and the values it contains.:

[sql]

ALTER TABLE films DROP CONSTRAINT films_pkey;

[/sql]
