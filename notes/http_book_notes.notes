---------- HTTP Background ----------

- *web browser* => interface or window thru which you interact w/ WWW
  - most common type of *client*
  - sends files to/from *server* thru HTTP
- *HTTP* => *Hypertext Transfer Protocol*
  - # a system of rules (a protocol) that serve as a link b/w applications and the transfer of hypertext documents
    - (an agreement or msg format, of how machines communicate w/ each other)
  - HTTP is a *request response protocol* => a <client> makes a *request* to a <server>, and waits for a *response*

How the Internet Works:
- *IP Address* => unique labels assigned by an ISP to every device on Internet
  - *port numbers* => add more detail about how to communicate
- *DNS* (*Domain Naming System*) => a <distributed database> that translates URLs to IP addresses, and maps the request to a remote server
  - *DNS servers* => computers that store <DNS databases>
    - # there is a world-wide network of hierarchically organized DNS servers
      - # no single server contains the complete database
        - DNS server routes unknown <domain names> to another server up the hierarchy
- <Typical interaction w/ the Internet>:
  1. enter "google.com" into browser
  2. your <request> is sent to your device's network interface
  3. request goes over Internet --> search for "google.com" begins
  4. remote server accepts and processes request --> sends <response> over Internet to your network interface --> then response handed to browser
  5. browser processes and displays response in form of a web page
  - # when your browser issues a request, it's just sending some text to an IP address

Resources:
- *resources* => things you interact w/ on the Internet via a URL
  ex: images, videos, web pages, other files, software, etc...

Statelessness:
  - *stateless protocol* => each <request/response> pair is independent of previous one
    - # server does not need to hang on to info (state) b/w requests
      - (if request breaks en route to server, no part of the system has to do any cleanup)
  - makes the web both:
    - # resilient, distributed, and hard to control
    - # difficult to secure and build on top of



---------- URL ----------

- *URI* => Uniform Resource Identifier
  - specifies how resources are located
  - *URL* => Uniform Resource Locator
    - most commonly used part of a URI
    - like an address / phone number

URL components:
  ex: "http://www.example.com:88/home?item=book"
    1. "http" => *scheme*
      - tells the web client how to access the resource
    2. "www.example.com" => *host*
      - tells the client where the resource is hosted or located
    3. ":88" => *port* or port number
      - only required when using a non-default port (80)
    4. "/home/" => *path*
      - shows what local resource is being requested (optional)
    5. "?item=book" => *query string*
      - made up of *query parameters*
      - used for sending data to the server (optional)

Query Strings/Parameters:
  ex: "http://www.example.com?search=ruby&results=10"
    - "?" => marks <start of query string> (reserved char)
    - "search=ruby" => <parameter name/value pair>
    - "&" => query string <separator/delimiter> (reserved char)
      - used to combine multiple parameters
  - # query strings are only used in HTTP GET requests
    - b/c they're passed in thru the URL
  - query string limitations:
    - max length --> so not good for passing large amounts of data
    - name/value pairs are visible in URL --> so not good for sensitive info
    - spaces and special chars must be URL encoded

URL Encoding:
  - replace special chars w/ % symbol followed by 2 hex digits (ASCII code)
      ex: " " --> %20, "!" --> %21, "+" --> %2B, "#" --> %23
  - characters must be encoded if:
    1. they have <no corresponding ASCII char>
    2. use of char is <unsafe>
      ex: "%" => used for encoding other chars
    3. char is <reserved for special use> w/i the URL scheme
      - # reserved char must be encoded if used for non-reserved purpose
      ex: "/ ? : @ &"
        ex: ":" => used to delimit host/port components and user/password
