
 def shorthand(str)
   str = str.gsub(/\.\.|\:/, '-')                  # => "1,3,7,2,4,1",                  "1-3,1-2",      "1-3,1-2",      "1-3,1-2",      "1-3,1-2,4-6",         "1-5-2",        "104-2",           "104-02",               "545,64-11"
   str = str.gsub(/(\d)-(\d)-(\d)/, '\1-\2\2-\3')  # => "1,3,7,2,4,1",                  "1-3,1-2",      "1-3,1-2",      "1-3,1-2",      "1-3,1-2,4-6",         "1-55-2",       "104-2",           "104-02",               "545,64-11"
   nums = str.scan(/\d(?:-\d)?/)                   # => ["1", "3", "7", "2", "4", "1"], ["1-3", "1-2"], ["1-3", "1-2"], ["1-3", "1-2"], ["1-3", "1-2", "4-6"], ["1-5", "5-2"], ["1", "0", "4-2"], ["1", "0", "4-0", "2"], ["5", "4", "5", "6"...
   nums = nums.flat_map do |n|                     # => ["1", "3", "7", "2", "4", "1"], ["1-3", "1-2"], ["1-3", "1-2"], ["1-3", "1-2"], ["1-3", "1-2", "4-6"], ["1-5", "5-2"], ["1", "0", "4-2"], ["1", "0", "4-0", "2"], ["5", "4", "5", "6"...
     if n.size > 1                                 # => false, false, false, false, false, false, true, true, true, true, true, true, true, true, true, true, true, false, false, true, false, false, true, false, false, false, false, false...
      start_num = n[0].to_i                        # => 1,         1,      1,         1,      1,         1,      1,         1,      4,         1,               5,                           4,                              4,              ...
      end_num = n[-1].to_i                         # => 3,         2,      3,         2,      3,         2,      3,         2,      6,         5,               2,                           2,                              0,              ...
      end_num += 10 if end_num <= start_num        # => nil,       nil,    nil,       nil,    nil,       nil,    nil,       nil,    nil,       nil,             12,                          12,                             10,             ...
      (start_num..end_num).to_a                    # => [1, 2, 3], [1, 2], [1, 2, 3], [1, 2], [1, 2, 3], [1, 2], [1, 2, 3], [1, 2], [4, 5, 6], [1, 2, 3, 4, 5], [5, 6, 7, 8, 9, 10, 11, 12], [4, 5, 6, 7, 8, 9, 10, 11, 12], [4, 5, 6, 7, 8, ...
     else
       n.to_i                                      # => 1, 3, 7, 2, 4, 1, 1, 0, 1, 0, 2, 5, 4, 5, 6, 1
     end                                           # => 1, 3, 7, 2, 4, 1, [1, 2, 3], [1, 2], [1, 2, 3], [1, 2], [1, 2, 3], [1, 2], [1, 2, 3], [1, 2], [4, 5, 6], [1, 2, 3, 4, 5], [5, 6, 7, 8, 9, 10, 11, 12], 1, 0, [4, 5, 6, 7, 8, 9, 10, 1...
   end                                             # => [1, 3, 7, 2, 4, 1], [1, 2, 3, 1, 2], [1, 2, 3, 1, 2], [1, 2, 3, 1, 2], [1, 2, 3, 1, 2, 4, 5, 6], [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12], [1, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1...
   result = []                                     # => [],                 [],              [],              [],              [],                       [],                                         [],                                   []...
   nums.each_with_index do |n, idx|                # => [1, 3, 7, 2, 4, 1], [1, 2, 3, 1, 2], [1, 2, 3, 1, 2], [1, 2, 3, 1, 2], [1, 2, 3, 1, 2, 4, 5, 6], [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12], [1, 0, 4, 5, 6, 7, 8, 9, 10, 11, 12], [1...
     n += 10 until n > result.last.to_i            # => nil, nil,    nil,       nil,           nil,               nil,                   nil, nil,    nil,       nil,           nil,               nil, nil,    nil,       nil,           nil...
     result << n                                   # => [1], [1, 3], [1, 3, 7], [1, 3, 7, 12], [1, 3, 7, 12, 14], [1, 3, 7, 12, 14, 21], [1], [1, 2], [1, 2, 3], [1, 2, 3, 11], [1, 2, 3, 11, 12], [1], [1, 2], [1, 2, 3], [1, 2, 3, 11], [1,...
   end                                             # => [1, 3, 7, 2, 4, 1],    [1, 2, 3, 1, 2],   [1, 2, 3, 1, 2],   [1, 2, 3, 1, 2],   [1, 2, 3, 1, 2, 4, 5, 6],      [1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 11, 12],      [1, 0, 4, 5, 6, 7, 8,...
   result                                          # => [1, 3, 7, 12, 14, 21], [1, 2, 3, 11, 12], [1, 2, 3, 11, 12], [1, 2, 3, 11, 12], [1, 2, 3, 11, 12, 14, 15, 16], [1, 2, 3, 4, 5, 15, 16, 17, 18, 19, 20, 21, 22], [1, 10, 14, 15, 16, 1...
 end                                               # => :shorthand

 p shorthand('1,3,7,2,4,1')  # => [1, 3, 7, 12, 14, 21]
   # [1, 3, 7, 12, 14, 21]
 p shorthand('1..3,1..2')    # => [1, 2, 3, 11, 12]
   # [1, 2, 3, 11, 12]
 p shorthand('1-3,1-2')      # => [1, 2, 3, 11, 12]
   # [1, 2, 3, 11, 12]
 p shorthand('1:3,1:2')      # => [1, 2, 3, 11, 12]
   # [1, 2, 3, 11, 12]
 p shorthand('1:3,1:2,4:6')  # => [1, 2, 3, 11, 12, 14, 15, 16]
   # [1, 2, 3, 11, 12, 14, 15, 16]
 p shorthand('1:5:2')        # => [1, 2, 3, 4, 5, 15, 16, 17, 18, 19, 20, 21, 22]
 p shorthand('104-2')        # => [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22]
 p shorthand('104..02')      # => [1, 10, 14, 15, 16, 17, 18, 19, 20, 22]
 p shorthand('545,64:11')    # => [5, 14, 15, 16, 24, 25, 26, 27, 28, 29, 30, 31, 41]

# >> [1, 3, 7, 12, 14, 21]
# >> [1, 2, 3, 11, 12]
# >> [1, 2, 3, 11, 12]
# >> [1, 2, 3, 11, 12]
# >> [1, 2, 3, 11, 12, 14, 15, 16]
# >> [1, 2, 3, 4, 5, 15, 16, 17, 18, 19, 20, 21, 22]
# >> [1, 10, 14, 15, 16, 17, 18, 19, 20, 21, 22]
# >> [1, 10, 14, 15, 16, 17, 18, 19, 20, 22]
# >> [5, 14, 15, 16, 24, 25, 26, 27, 28, 29, 30, 31, 41]