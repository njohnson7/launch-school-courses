----------- LOOK UP -------------
- assessment study guide
  - why isn't `String.fromCharCode` a function?
- uncaught vs caught error?
- # are array indexes also properties?
- is `arr[1]` and `arr[1] = 5` and `obj['a']` considered a method or operator?
  - (square bracket notation)
- "computed elem operator"?
- creation/execution phase in global/function context (hoisting)
- difference b/w Array(4) and Array(4).fill() (undefined's)



----------- STUDY MORE -----------
- chrome devtools video and articles:
  - "https://launchschool.com/lessons/56df7843/assignments/0c65c1ca"
  - # practice debugger more!
- hoisting details
- function expressions
- regex book...?

- # lesson 9 - PEDAC
  - # prob solv vids




==================================================================
--------- Interview SG ---------
==================================================================
- basic JavaScript programming and problem solving skills.
- # 40 min time limit

JavaScript specific topics that you need to study on:
- Language syntax, types, and flow control
- Functions, variables, and scopes
- Arrays and objects
- Language built-in methods on String and Array
- Mutability of values and objects
- Pure functions and side effects
- Regular expressions (what's covered in our book)

General problem solving topics you're expected to demonstrate in the interview:
- Be able to build and communicate a clear plan towards solving a given problem
- Fluent with JavaScript's built-in list processing abstractions and higher-order functions
- Be able to write code that follows clear and idiomatic abstractions
- Be able to validate assumptions, debug issues and fix any problems
- Good code style

General communication and presence:
- Think, speak, and code deliberately
- Accuracy in concepts and terminologies
- Stay calm

Follow process of "General Problem Solving" approach to solving a code challenge:
- Understand the problem
- Examples/test cases
- Data structure and algorithms
- Verify your algorithm against the examples
- Start Coding





==================================================================
--------- Written Test SG ---------
==================================================================
=====
- primitive values, types and type conversions
- variable scopes and hoisting
- function declarations, expressions and scopes
- object properties and mutation
- assignments and comparison
- pure functions and side effects
=====

- *return value* of an <expression>
- whether there are *side effects* (ex: mutation)
- whether *new objects* are <created>
- or whether something is being *output*

=====

- explain *why* something happens:
  - using precise vocab
  - pinpoint the exact *causal mechanism* at work
- explain *how* code works

=====

- explain a <concept>
- <analyze> code
- describe <what's happening>

ex:
  [js]
          var a = "hello";

          function foo() {
            console.log(a);
          }

          foo();
  [end]
  - when the function is executed, the variable `a` inside the `foo` function is the same as the variable `a` outside of the function based on JavaScript's lexical scoping rules, therefore line 4 logs hello to the console.
    - The function also returns `undefined` since there isn't an explicit return statement.

==================================================================
==================================================================

--------- Maybe -------------
- how to create snippets in devtools
xx- devtools on test for debuger?
xx-how often to run code? (every line like in ruby?)
  - test things in console like irb?
advantages to JS over ruby?

single line if else?
blinking chrome cursor?
- use for loop for early return. forEach otherwise...?

custom console log?
let?
const?

