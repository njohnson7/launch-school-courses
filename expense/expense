#! /usr/bin/env ruby
require 'pg'
require 'io/console'

class ExpenseData
  def initialize
    setup_database
    @connection = PG.connect(dbname: 'expenses')
    setup_schema
  end

  def list_expenses
    result = @connection.exec('SELECT * FROM expenses ORDER BY created_on ASC;')
    display_expenses(result)
  end

  def add_expense(amount, memo)
    date = Date.today
    sql = 'INSERT INTO expenses (amount, memo, created_on) VALUES ($1, $2, $3);'
    @connection.exec_params(sql, [amount, memo, date])
  end

  def search_expenses(query)
    sql = 'SELECT * FROM expenses WHERE memo ILIKE $1;'
    result = @connection.exec_params(sql, ["%#{query}%"])
    display_expenses(result)
  end

  def delete_expense(id)
    sql_expense = 'SELECT * FROM expenses WHERE id = $1;'
    result = @connection.exec_params(sql_expense, [id])

    sql_delete = 'DELETE FROM expenses WHERE id = $1;'
    @connection.exec_params(sql_delete, [id])

    puts 'The following expense has been deleted:'
    display_expenses(result)
  end

  def delete_all_expenses
    @connection.exec('DELETE FROM expenses;')
    puts 'All expenses have been deleted.'
  end

  def valid_id?(id)
    expenses_ids.include?(id)
  end

  private

  def display_expenses(expenses)
    display_count(expenses)
    abort unless expenses.any?

    expenses.each do |tuple|
      columns = [ tuple['id'].rjust(3),
                  tuple['created_on'].rjust(10),
                  tuple['amount'].rjust(12),
                  tuple['memo'] ]

      puts columns.join(' | ')
    end

    display_total(expenses)
  end

  def display_count(result)
    count = result.ntuples
    if count.zero?
      puts 'There are no expenses.'
    else
      verb, ending = count == 1 ? 'is' : %w[are s]
      puts format('There %s %s expense%s.', verb, count, ending)
    end
  end

  def display_total(result)
    total = format('%.2f', result.field_values('amount').map(&:to_f).sum)
    puts '-' * 50
    puts "Total #{total.rjust(25)}"
  end

  def expenses_ids
    @connection.exec('SELECT id FROM expenses;').values.flatten
  end

  def setup_database
    PG.connect(dbname: 'expenses') rescue `createdb expenses`
  end

  def setup_schema
    result = @connection.exec <<~SQL
      SELECT count(*) FROM information_schema.tables
      WHERE table_schema = 'public' AND table_name = 'expenses';
    SQL
    return if result.values.first.first == '1'
    `psql -d expenses < schema.sql`
  end
end

class CLI
  def initialize
    @application = ExpenseData.new
  end

  def run(args)
    command = args.shift

    case command
    when 'list'
      @application.list_expenses
    when 'add'
      amount, memo = args.shift(2)
      abort 'You must provide an amount and memo.' unless amount && memo
      @application.add_expense(amount, memo)
    when 'search'
      query = args.shift
      abort 'You must provide a query.' unless query
      @application.search_expenses(query)
    when 'delete'
      id = args.shift
      abort "There is no expense with the id '#{id}'." unless @application.valid_id?(id)
      @application.delete_expense(id)
    when 'clear'
      confirm_clear
      @application.delete_all_expenses
    else
      display_help
    end
  end

  def display_help
    puts <<~HELP
      An expense recording system

      Commands:

      add AMOUNT MEMO [DATE] - record a new expense
      clear - delete all expenses
      list - list all expenses
      delete NUMBER - remove expense with id NUMBER
      search QUERY - list expenses with a matching memo field
    HELP
  end

  # def confirm_clear
  #   puts 'This will remove all expenses. Are you sure? (y/n)'
  #   loop do
  #     response = gets.strip.downcase
  #     abort if response == 'n'
  #     return if response == 'y'
  #     puts "You must enter 'y' or 'n'."
  #   end
  # end

  def confirm_clear
    puts 'This will remove all expenses. Are you sure? (y/n)'
    response = $stdin.getch.downcase
    abort unless response == 'y'
  end
end

CLI.new.run(ARGV)

